# examples/risk_hot_reload_example.py
"""
Risk Configuration Hot-Reload System Example.

Demonstrates YAML watcher with JSON Schema validation to prevent
malformed YAML from wiping all risk limits during hot-reload.
"""

import os
import sys
import time
import json
import yaml
import logging
from pathlib import Path
from typing import Dict, Any

# Add src to path for imports
sys.path.insert(0, str(Path(__file__).parent.parent / 'src'))

from risk.config.risk_config_validator import create_risk_config_validator, ValidationSeverity
from risk.config.risk_config_hot_reload import create_risk_config_hot_reloader, ReloadStatus
from risk.config.risk_config_manager import create_risk_config_manager, ConfigChangeType


def test_config_validation():
    """Test JSON Schema validation with various configurations."""
    print("üéØ Testing Configuration Validation")
    print("=" * 60)
    
    validator = create_risk_config_validator()
    
    # Test 1: Valid configuration
    print("\nüìã Test 1: Valid Configuration")
    valid_config = {
        "policies": {
            "production_policy": {
                "calculators": {
                    "var": {
                        "enabled": True,
                        "config": {
                            "confidence_levels": [0.95, 0.99, 0.999],
                            "window_days": 250,
                            "method": "parametric",
                            "distribution": "normal",
                            "min_observations": 30
                        }
                    },
                    "stress_test": {
                        "enabled": True,
                        "config": {
                            "scenarios": ["historical", "monte_carlo", "factor_shock"],
                            "confidence_levels": [0.95, 0.99, 0.999],
                            "monte_carlo_runs": 10000
                        }
                    }
                },
                "rules": [
                    {
                        "rule_id": "var_95_limit",
                        "rule_name": "VaR 95% Limit",
                        "rule_type": "threshold",
                        "field": "var_95",
                        "threshold": 100000,
                        "operator": "gt",
                        "action": "warn",
                        "severity": "medium",
                        "monitoring_mode": True,
                        "enforcement_enabled": False
                    },
                    {
                        "rule_id": "var_99_limit",
                        "rule_name": "VaR 99% Limit",
                        "rule_type": "threshold",
                        "field": "var_99",
                        "threshold": 200000,
                        "operator": "gt",
                        "action": "throttle",
                        "severity": "high",
                        "monitoring_mode": True,
                        "enforcement_enabled": False
                    }
                ]
            }
        },
        "active_policy": "production_policy",
        "enforcement": {
            "mode": "monitoring",
            "false_positive_threshold_per_week": 1.0,
            "var_limits": {
                "var_95_limit": 100000,
                "var_99_limit": 200000,
                "var_999_limit": 500000
            },
            "stress_limits": {
                "max_stress_loss": 1000000,
                "max_scenario_failures": 3,
                "max_tail_ratio": 1.5
            },
            "audit": {
                "enabled": True,
                "log_directory": "logs/risk_audit",
                "async_logging": True
            },
            "metrics": {
                "enabled": True,
                "namespace": "risk",
                "subsystem": "management"
            }
        }
    }
    
    result = validator.validate_config(valid_config)
    print(f"  Result: {result.get_summary()}")
    print(f"  Validation time: {result.validation_time_ms:.1f}ms")
    
    # Test 2: Invalid configuration (missing policies)
    print("\nüìã Test 2: Invalid Configuration - Missing Policies")
    invalid_config = {
        "policies": {},  # Empty policies - should trigger critical error
        "active_policy": "nonexistent_policy"
    }
    
    result = validator.validate_config(invalid_config)
    print(f"  Result: {result.get_summary()}")
    print(f"  Blocking errors: {result.has_blocking_errors()}")
    
    for error in result.errors:
        severity = error.get('severity', 'unknown')
        message = error.get('message', 'Unknown error')
        path = error.get('path', 'unknown')
        print(f"    ‚ùå {severity.upper()}: {message} (path: {path})")
    
    # Test 3: Configuration with warnings
    print("\nüìã Test 3: Configuration with Warnings")
    warning_config = valid_config.copy()
    warning_config['enforcement']['var_limits']['var_95_limit'] = 300000  # Higher than var_99_limit
    warning_config['enforcement']['var_limits']['var_99_limit'] = 200000
    
    result = validator.validate_config(warning_config)
    print(f"  Result: {result.get_summary()}")
    
    for warning in result.warnings:
        message = warning.get('message', 'Unknown warning')
        path = warning.get('path', 'unknown')
        print(f"    ‚ö†Ô∏è  WARNING: {message} (path: {path})")
    
    # Test 4: Configuration diff analysis
    print("\nüìã Test 4: Configuration Diff Analysis")
    modified_config = valid_config.copy()
    modified_config['enforcement']['mode'] = 'full'
    modified_config['enforcement']['var_limits']['var_95_limit'] = 150000
    modified_config['active_policy'] = 'production_policy'
    
    result = validator.validate_config(modified_config, valid_config)
    print(f"  Result: {result.get_summary()}")
    
    for info in result.info:
        message = info.get('message', 'Unknown info')
        path = info.get('path', 'unknown')
        print(f"    ‚ÑπÔ∏è  INFO: {message} (path: {path})")
    
    for warning in result.warnings:
        message = warning.get('message', 'Unknown warning')
        path = warning.get('path', 'unknown')
        print(f"    ‚ö†Ô∏è  WARNING: {message} (path: {path})")
    
    print("‚úÖ Configuration validation test completed\n")
    return valid_config


def test_hot_reload_system(base_config: Dict[str, Any]):
    """Test hot-reload system with file watching."""
    print("üéØ Testing Hot-Reload System")
    print("=" * 60)
    
    # Create test config file
    config_path = Path("test_risk_config_hot_reload.yaml")
    
    try:
        # Write initial config
        with open(config_path, 'w') as f:
            yaml.dump(base_config, f, default_flow_style=False)
        
        print(f"üìÅ Created test config: {config_path}")
        
        # Test hot-reloader
        reload_events = []
        
        def reload_callback(result):
            reload_events.append(result)
            print(f"  üîÑ Reload event: {result.get_summary()}")
            
            if result.validation_result:
                if result.validation_result.warnings:
                    for warning in result.validation_result.warnings:
                        print(f"    ‚ö†Ô∏è  {warning.get('message', 'Unknown warning')}")
                
                if result.validation_result.errors:
                    for error in result.validation_result.errors:
                        print(f"    ‚ùå {error.get('message', 'Unknown error')}")
        
        with create_risk_config_hot_reloader([str(config_path)]) as hot_reloader:
            hot_reloader.add_reload_callback(reload_callback)
            
            # Load initial config
            print("\nüìã Loading Initial Configuration")
            result = hot_reloader.load_initial_config()
            print(f"  Initial load: {result.get_summary()}")
            
            # Test 1: Valid configuration change
            print("\nüìã Test 1: Valid Configuration Change")
            modified_config = base_config.copy()
            modified_config['enforcement']['mode'] = 'gradual'
            modified_config['enforcement']['var_limits']['var_95_limit'] = 120000
            
            with open(config_path, 'w') as f:
                yaml.dump(modified_config, f, default_flow_style=False)
            
            time.sleep(2)  # Wait for file watcher
            
            current_config = hot_reloader.get_current_config()
            if current_config:
                print(f"  ‚úÖ Config updated - Mode: {current_config['enforcement']['mode']}")
                print(f"  ‚úÖ VaR 95% limit: ${current_config['enforcement']['var_limits']['var_95_limit']:,}")
            
            # Test 2: Invalid YAML (malformed)
            print("\nüìã Test 2: Invalid YAML - Malformed Syntax")
            with open(config_path, 'w') as f:
                f.write("""
policies:
  test_policy:
    calculators:
      var:
        enabled: true
        config: [invalid: yaml: syntax
""")
            
            time.sleep(2)  # Wait for file watcher
            
            current_config = hot_reloader.get_current_config()
            if current_config:
                # Should still have previous valid config
                print(f"  ‚úÖ Config preserved - Mode: {current_config['enforcement']['mode']}")
                print("  ‚úÖ Malformed YAML rejected, limits not wiped!")
            
            # Test 3: Invalid configuration (missing policies)
            print("\nüìã Test 3: Invalid Configuration - Missing Policies")
            dangerous_config = {
                "policies": {},  # This would wipe all limits!
                "active_policy": "nonexistent"
            }
            
            with open(config_path, 'w') as f:
                yaml.dump(dangerous_config, f, default_flow_style=False)
            
            time.sleep(2)  # Wait for file watcher
            
            current_config = hot_reloader.get_current_config()
            if current_config and current_config.get('policies'):
                print("  ‚úÖ Dangerous config rejected, policies preserved!")
                print(f"  ‚úÖ Active policy: {current_config.get('active_policy')}")
            
            # Test 4: Large limit change (should warn)
            print("\nüìã Test 4: Large Limit Change")
            large_change_config = base_config.copy()
            large_change_config['enforcement']['var_limits']['var_95_limit'] = 500000  # 5x increase
            
            with open(config_path, 'w') as f:
                yaml.dump(large_change_config, f, default_flow_style=False)
            
            time.sleep(2)  # Wait for file watcher
            
            # Test 5: Rollback functionality
            print("\nüìã Test 5: Configuration Rollback")
            rollback_result = hot_reloader.rollback_config()
            print(f"  Rollback result: {rollback_result.get_summary()}")
            
            # Show statistics
            print(f"\nüìä Hot-Reload Statistics:")
            stats = hot_reloader.get_stats()
            print(f"  Total reloads: {stats['reload_count']}")
            print(f"  Successful: {stats['successful_reloads']}")
            print(f"  Failed: {stats['failed_reloads']}")
            print(f"  Success rate: {stats['success_rate']:.1f}%")
            print(f"  Watched files: {len(stats['watched_files'])}")
    
    finally:
        # Cleanup
        if config_path.exists():
            config_path.unlink()
            print(f"üßπ Cleaned up test config: {config_path}")
    
    print("‚úÖ Hot-reload system test completed\n")


def test_config_manager_integration(base_config: Dict[str, Any]):
    """Test configuration manager with hot-reload integration."""
    print("üéØ Testing Configuration Manager Integration")
    print("=" * 60)
    
    # Create test config file
    config_path = Path("test_risk_config_manager.yaml")
    
    try:
        # Write initial config
        with open(config_path, 'w') as f:
            yaml.dump(base_config, f, default_flow_style=False)
        
        print(f"üìÅ Created test config: {config_path}")
        
        # Test configuration manager
        change_events = []
        
        def config_change_callback(change):
            change_events.append(change)
            print(f"  üîÑ Config change: {change.get_summary()}")
            print(f"    Old: {change.old_value} ‚Üí New: {change.new_value}")
        
        with create_risk_config_manager([str(config_path)]) as config_manager:
            config_manager.add_change_callback(config_change_callback)
            
            # Test configuration access
            print("\nüìã Configuration Access Tests")
            
            active_policy = config_manager.get_active_policy()
            print(f"  Active policy: {active_policy.get('calculators', {}).keys()}")
            
            var_limits = config_manager.get_var_limits()
            print(f"  VaR limits: {var_limits}")
            
            enforcement = config_manager.get_enforcement_config()
            print(f"  Enforcement mode: {enforcement.get('mode')}")
            
            rules = config_manager.get_rules()
            print(f"  Rules count: {len(rules)}")
            
            # Test configuration changes
            print("\nüìã Configuration Change Tests")
            
            # Change 1: Enforcement mode
            print("  Changing enforcement mode...")
            modified_config = base_config.copy()
            modified_config['enforcement']['mode'] = 'full'
            
            with open(config_path, 'w') as f:
                yaml.dump(modified_config, f, default_flow_style=False)
            
            time.sleep(2)  # Wait for hot-reload
            
            new_enforcement = config_manager.get_enforcement_config()
            print(f"  ‚úÖ New enforcement mode: {new_enforcement.get('mode')}")
            
            # Change 2: VaR limits
            print("  Changing VaR limits...")
            modified_config['enforcement']['var_limits']['var_95_limit'] = 150000
            modified_config['enforcement']['var_limits']['var_99_limit'] = 300000
            
            with open(config_path, 'w') as f:
                yaml.dump(modified_config, f, default_flow_style=False)
            
            time.sleep(2)  # Wait for hot-reload
            
            new_var_limits = config_manager.get_var_limits()
            print(f"  ‚úÖ New VaR limits: {new_var_limits}")
            
            # Test invalid config (should not change)
            print("  Testing invalid config rejection...")
            invalid_config = {"policies": {}, "active_policy": "none"}
            
            with open(config_path, 'w') as f:
                yaml.dump(invalid_config, f, default_flow_style=False)
            
            time.sleep(2)  # Wait for hot-reload
            
            preserved_limits = config_manager.get_var_limits()
            print(f"  ‚úÖ Limits preserved: {preserved_limits}")
            
            # Test rollback
            print("  Testing configuration rollback...")
            rollback_result = config_manager.rollback_config()
            print(f"  Rollback: {rollback_result.get_summary()}")
            
            # Show statistics
            print(f"\nüìä Configuration Manager Statistics:")
            stats = config_manager.get_stats()
            print(f"  Config access count: {stats['config_access_count']}")
            print(f"  Hot-reload enabled: {stats['hot_reload_enabled']}")
            print(f"  Initialization time: {stats['initialization_time']*1000:.1f}ms")
            
            if 'hot_reload_stats' in stats:
                hr_stats = stats['hot_reload_stats']
                print(f"  Hot-reload success rate: {hr_stats['success_rate']:.1f}%")
            
            # Show change events
            print(f"\nüìä Configuration Change Events:")
            for i, event in enumerate(change_events, 1):
                print(f"  {i}. {event.change_type.value}: {event.path}")
                print(f"     {event.old_value} ‚Üí {event.new_value}")
    
    finally:
        # Cleanup
        if config_path.exists():
            config_path.unlink()
            print(f"üßπ Cleaned up test config: {config_path}")
    
    print("‚úÖ Configuration manager integration test completed\n")


def test_safe_defaults_fallback():
    """Test safe defaults fallback when all configs fail."""
    print("üéØ Testing Safe Defaults Fallback")
    print("=" * 60)
    
    # Test with non-existent config files
    config_manager = create_risk_config_manager([
        "nonexistent1.yaml",
        "nonexistent2.yaml"
    ])
    
    success = config_manager.initialize()
    print(f"  Initialization with missing files: {'‚úÖ Success' if success else '‚ùå Failed'}")
    
    # Should fall back to safe defaults
    config = config_manager.get_config()
    print(f"  Active policy: {config.get('active_policy')}")
    print(f"  Enforcement mode: {config.get('enforcement', {}).get('mode')}")
    
    var_limits = config_manager.get_var_limits()
    print(f"  Safe VaR limits: {var_limits}")
    
    rules = config_manager.get_rules()
    print(f"  Safe rules count: {len(rules)}")
    
    if rules:
        emergency_rule = rules[0]
        print(f"  Emergency rule: {emergency_rule.get('rule_name')} (${emergency_rule.get('threshold'):,})")
    
    config_manager.shutdown()
    print("‚úÖ Safe defaults fallback test completed\n")


def main():
    """Run comprehensive risk hot-reload system tests."""
    print("üöÄ Risk Configuration Hot-Reload System")
    print("=" * 80)
    print("Testing YAML watcher with JSON Schema validation to prevent")
    print("malformed YAML from wiping all risk limits during hot-reload.")
    print("=" * 80)
    
    # Setup logging
    logging.basicConfig(
        level=logging.INFO,
        format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
    )
    
    try:
        # Test 1: Configuration validation
        base_config = test_config_validation()
        
        # Test 2: Hot-reload system
        test_hot_reload_system(base_config)
        
        # Test 3: Configuration manager integration
        test_config_manager_integration(base_config)
        
        # Test 4: Safe defaults fallback
        test_safe_defaults_fallback()
        
        print("üéâ ALL TESTS COMPLETED SUCCESSFULLY")
        print("=" * 80)
        print("‚úÖ JSON Schema validation prevents malformed YAML")
        print("‚úÖ Hot-reload system safely rejects invalid configurations")
        print("‚úÖ Risk limits are preserved during configuration failures")
        print("‚úÖ Safe defaults prevent system lockup")
        print("‚úÖ Configuration changes are tracked and validated")
        print("‚úÖ Rollback functionality works correctly")
        print("=" * 80)
        print("üîß Risk hot-reload system is production-ready!")
        
    except Exception as e:
        print(f"‚ùå Test failed with exception: {e}")
        import traceback
        traceback.print_exc()
        return 1
    
    return 0


if __name__ == "__main__":
    sys.exit(main())