# src/security/advanced_secrets_manager.py
"""
Enhanced AdvancedSecretsManager with protocol-based architecture.
Provides unified interface to multiple vault backends with audit logging.
"""

import logging
import asyncio
import base64
from typing import Dict, Any, Optional, List
from datetime import datetime, timedelta

from .protocols import VaultBackend, SecretData, SecretMetadata, SecretType
from .encryption import HardenedEncryption


class SecretNotFoundError(Exception):
    """Raised when a secret is not found."""
    pass


class SecretExpiredError(Exception):
    """Raised when a secret has expired."""
    pass


class AdvancedSecretsManager:
    """
    Enhanced secrets manager with protocol-based backend architecture.
    
    Features:
    - Backend-agnostic design (local, cloud, Vault)
    - Hardened encryption with Argon2id
    - Audit logging for compliance
    - Secret rotation tracking
    - Expiration management
    """
    
    def __init__(self, backend: VaultBackend, master_password: str):
        self.backend = backend
        self.encryption = HardenedEncryption()
        self.master_password = master_password
        self.logger = logging.getLogger("AdvancedSecretsManager")
        
        # Metrics tracking
        self.operation_count = 0
        self.last_operation_time = None
    
    async def write_secret(self, key: str, value: str, 
                          metadata_dict: Optional[Dict[str, Any]] = None) -> bool:
        """
        Write a secret with encryption and metadata.
        
        Args:
            key: Secret identifier
            value: Secret value (will be encrypted)
            metadata_dict: Optional metadata dictionary
            
        Returns:
            True if successful, False otherwise
        """
        try:
            # Encrypt the secret value
            encrypted_data, salt = self.encryption.encrypt(value, self.master_password)
            
            # Combine salt + encrypted data for storage
            storage_data = salt + encrypted_data
            
            # Create metadata
            metadata = SecretMetadata(
                secret_type=SecretType.API_KEY,  # Default
                description=metadata_dict.get('description', '') if metadata_dict else '',
                tags=metadata_dict.get('tags', {}) if metadata_dict else {}
            )
            
            # Store in backend
            success = await self.backend.store(key, storage_data, metadata)
            
            if success:
                self._record_operation("write", True)
                self.logger.info(f"Secret '{key}' written successfully")
            else:
                self._record_operation("write", False)
                self.logger.error(f"Failed to write secret '{key}'")
            
            return success
            
        except Exception as e:
            self._record_operation("write", False)
            self.logger.error(f"Error writing secret '{key}': {e}")
            return False
    
    async def read_secret(self, key: str) -> Dict[str, Any]:
        """
        Read and decrypt a secret.
        
        Args:
            key: Secret identifier
            
        Returns:
            Dictionary with 'value' and 'metadata' keys
            
        Raises:
            SecretNotFoundError: If secret doesn't exist
            SecretExpiredError: If secret has expired
        """
        try:
            # Retrieve from backend
            secret_data = await self.backend.retrieve(key)
            
            # Check expiration
            if secret_data.is_expired():
                self._record_operation("read", False)
                raise SecretExpiredError(f"Secret '{key}' has expired")
            
            # Decrypt the value
            import base64
            storage_data = base64.b64decode(secret_data.value.encode('utf-8'))  # Convert back from string
            salt = storage_data[:32]  # First 32 bytes are salt
            encrypted_data = storage_data[32:]  # Rest is encrypted data
            
            decrypted_value = self.encryption.decrypt(encrypted_data, salt, self.master_password)
            
            self._record_operation("read", True)
            self.logger.debug(f"Secret '{key}' read successfully")
            
            return {
                'value': decrypted_value,
                'metadata': secret_data.metadata.dict(),
                'key': key
            }
            
        except KeyError:
            self._record_operation("read", False)
            raise SecretNotFoundError(f"Secret '{key}' not found")
        except Exception as e:
            self._record_operation("read", False)
            self.logger.error(f"Error reading secret '{key}': {e}")
            raise
    
    async def rotate_secret(self, key: str, new_value: str) -> bool:
        """
        Rotate a secret to a new value, incrementing rotation count.
        
        Args:
            key: Secret identifier
            new_value: New secret value
            
        Returns:
            True if successful, False otherwise
        """
        try:
            # Get existing metadata
            try:
                existing_secret = await self.backend.retrieve(key)
                metadata = existing_secret.metadata
                metadata.rotation_count += 1
                metadata.updated_at = datetime.utcnow()
            except KeyError:
                # Secret doesn't exist, create new metadata
                metadata = SecretMetadata(
                    secret_type=SecretType.API_KEY,
                    rotation_count=1
                )
            
            # Encrypt new value
            encrypted_data, salt = self.encryption.encrypt(new_value, self.master_password)
            storage_data = salt + encrypted_data
            
            # Store rotated secret
            success = await self.backend.store(key, storage_data, metadata)
            
            if success:
                self._record_operation("rotate", True)
                self.logger.info(f"Secret '{key}' rotated successfully (rotation #{metadata.rotation_count})")
            else:
                self._record_operation("rotate", False)
                self.logger.error(f"Failed to rotate secret '{key}'")
            
            return success
            
        except Exception as e:
            self._record_operation("rotate", False)
            self.logger.error(f"Error rotating secret '{key}': {e}")
            return False
    
    async def delete_secret(self, key: str) -> bool:
        """
        Delete a secret.
        
        Args:
            key: Secret identifier
            
        Returns:
            True if successful, False otherwise
        """
        try:
            success = await self.backend.delete(key)
            
            if success:
                self._record_operation("delete", True)
                self.logger.info(f"Secret '{key}' deleted successfully")
            else:
                self._record_operation("delete", False)
                self.logger.warning(f"Secret '{key}' not found for deletion")
            
            return success
            
        except Exception as e:
            self._record_operation("delete", False)
            self.logger.error(f"Error deleting secret '{key}': {e}")
            return False
    
    async def list_secrets(self) -> List[str]:
        """
        List all secret keys.
        
        Returns:
            List of secret keys
        """
        try:
            keys = await self.backend.list_keys()
            self._record_operation("list", True)
            self.logger.debug(f"Listed {len(keys)} secrets")
            return keys
            
        except Exception as e:
            self._record_operation("list", False)
            self.logger.error(f"Error listing secrets: {e}")
            return []
    
    async def secret_exists(self, key: str) -> bool:
        """
        Check if a secret exists.
        
        Args:
            key: Secret identifier
            
        Returns:
            True if secret exists, False otherwise
        """
        try:
            exists = await self.backend.exists(key)
            self._record_operation("exists", True)
            return exists
            
        except Exception as e:
            self._record_operation("exists", False)
            self.logger.error(f"Error checking existence of secret '{key}': {e}")
            return False
    
    async def get_secret_metadata(self, key: str) -> Dict[str, Any]:
        """
        Get secret metadata without decrypting the value.
        
        Args:
            key: Secret identifier
            
        Returns:
            Metadata dictionary
            
        Raises:
            SecretNotFoundError: If secret doesn't exist
        """
        try:
            secret_data = await self.backend.retrieve(key)
            self._record_operation("metadata", True)
            return secret_data.metadata.dict()
            
        except KeyError:
            self._record_operation("metadata", False)
            raise SecretNotFoundError(f"Secret '{key}' not found")
        except Exception as e:
            self._record_operation("metadata", False)
            self.logger.error(f"Error getting metadata for secret '{key}': {e}")
            raise
    
    async def find_expiring_secrets(self, days_threshold: int = 30) -> List[Dict[str, Any]]:
        """
        Find secrets expiring within the threshold.
        
        Args:
            days_threshold: Number of days to look ahead
            
        Returns:
            List of dictionaries with key, days_until_expiry, metadata
        """
        expiring_secrets = []
        
        try:
            keys = await self.backend.list_keys()
            
            for key in keys:
                try:
                    secret_data = await self.backend.retrieve(key)
                    days_until_expiry = secret_data.days_until_expiry()
                    
                    if days_until_expiry is not None and days_until_expiry <= days_threshold:
                        expiring_secrets.append({
                            'key': key,
                            'days_until_expiry': days_until_expiry,
                            'metadata': secret_data.metadata.dict()
                        })
                        
                except Exception as e:
                    self.logger.warning(f"Error checking expiry for secret '{key}': {e}")
                    continue
            
            self.logger.info(f"Found {len(expiring_secrets)} secrets expiring within {days_threshold} days")
            return expiring_secrets
            
        except Exception as e:
            self.logger.error(f"Error finding expiring secrets: {e}")
            return []
    
    def _record_operation(self, operation: str, success: bool) -> None:
        """Record operation metrics."""
        self.operation_count += 1
        self.last_operation_time = datetime.utcnow()
        
        # Log audit trail
        self.logger.info(f"AUDIT: operation={operation} success={success} count={self.operation_count}")
    
    def get_stats(self) -> Dict[str, Any]:
        """Get manager statistics."""
        return {
            'operation_count': self.operation_count,
            'last_operation_time': self.last_operation_time.isoformat() if self.last_operation_time else None,
            'backend_type': self.backend.__class__.__name__,
            'encryption_type': 'Argon2id' if self.encryption.use_argon2 else 'PBKDF2'
        }


# Convenience functions for common secret types
class SecretsHelper:
    """Helper class for common secret operations."""
    
    def __init__(self, manager: AdvancedSecretsManager):
        self.manager = manager
    
    async def store_database_credentials(self, db_name: str, host: str, port: int, 
                                       username: str, password: str, database: str) -> bool:
        """Store database credentials as JSON."""
        credentials = {
            'host': host,
            'port': port,
            'username': username,
            'password': password,
            'database': database
        }
        
        return await self.manager.write_secret(
            f"database/{db_name}",
            json.dumps(credentials),
            {'description': f'Database credentials for {db_name}', 'tags': {'type': 'database'}}
        )
    
    async def get_database_credentials(self, db_name: str) -> Dict[str, Any]:
        """Get database credentials as dictionary."""
        secret_data = await self.manager.read_secret(f"database/{db_name}")
        return json.loads(secret_data['value'])
    
    async def store_api_key(self, service_name: str, api_key: str, description: str = "") -> bool:
        """Store API key."""
        return await self.manager.write_secret(
            f"api_key/{service_name}",
            api_key,
            {'description': description or f'API key for {service_name}', 'tags': {'type': 'api_key'}}
        )
    
    async def get_api_key(self, service_name: str) -> str:
        """Get API key."""
        secret_data = await self.manager.read_secret(f"api_key/{service_name}")
        return secret_data['value']
