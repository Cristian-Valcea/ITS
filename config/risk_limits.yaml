# config/risk_limits.yaml
# Configuration for risk management parameters.
# Used by RiskAgent for live trading and can inform IntradayTradingEnv for training/backtesting.

# --- Drawdown Limits ---
# Maximum percentage of capital that can be lost before risk intervention.
max_daily_drawdown_pct: 0.02  # e.g., 2% of start-of-day capital.
                               # If current_equity < start_of_day_equity * (1 - max_daily_drawdown_pct), limit is breached.

# Optional: A harder, absolute drawdown limit if needed.
# max_absolute_drawdown_value: 5000 # e.g., Stop if total loss exceeds $5000 from initial capital ever.

# --- Turnover Limits ---
# Turnover is defined as: Total Value of Trades / Capital (usually start-of-day capital).
# Helps control trading frequency and associated costs/slippage.

# Hourly Turnover Cap:
# Maximum turnover allowed within any rolling 1-hour window.
max_hourly_turnover_ratio: 5.0  # e.g., Cannot trade more than 5x the start-of-day capital in any hour.

# Daily Turnover Cap:
# Maximum total turnover allowed for the entire trading day.
max_daily_turnover_ratio: 20.0 # e.g., Total value of trades in a day cannot exceed 20x start-of-day capital.


# --- Position Limits (Conceptual - More for portfolio management) ---
# max_position_size_pct_capital: 0.25 # e.g., No single position to exceed 25% of current capital.
# max_leverage: 2.0 # e.g., Max leverage allowed (Total Position Value / Net Liquidation Value)

# --- Order Controls (Conceptual - For execution) ---
# max_order_size_pct_volume: 0.01 # e.g., Single order not to exceed 1% of asset's average daily volume.
#                                 # Helps prevent excessive market impact.
# slippage_tolerance_pct: 0.001 # e.g., 0.1% slippage allowed from target price.

# --- General Risk Behavior ---
# Action to take when a critical limit (like drawdown or hard turnover cap) is breached.
halt_on_breach: true      # If true, RiskAgent signals to stop all new trading activity for the day (or relevant period).
                          # If false, it might just log a warning (not recommended for critical limits).

liquidate_on_halt: false  # If true, RiskAgent also signals to liquidate all open positions when a halt is triggered.
                          # If false, existing positions might be held until end-of-day or manual intervention.

# --- Specific Limit Actions (More Granular Control - Conceptual) ---
# This allows defining different responses for different limit breaches.
# limit_actions:
#   daily_drawdown:
#     action: "HALT_AND_LIQUIDATE" # Options: "WARN_ONLY", "HALT_TRADING", "HALT_AND_LIQUIDATE"
#     message: "Daily drawdown limit breached. Halting trading and liquidating positions."
#   hourly_turnover:
#     action: "WARN_ONLY" # Could be less strict, e.g., warn first, then halt if repeatedly breached.
#     threshold_warn_ratio: 0.8 # Warn if turnover reaches 80% of the hourly cap.
#     message_warn: "Approaching hourly turnover limit."
#     message_breach: "Hourly turnover limit breached. No new trades this hour."
#   daily_turnover:
#     action: "HALT_TRADING"
#     message: "Daily turnover limit breached. No new trades today."

# Note: The IntradayTradingEnv in the skeleton primarily implements `max_daily_drawdown_pct`.
# Turnover limits in the environment are more complex to implement accurately without
# awareness of capital and precise trade values per step, but can be approximated.
# The RiskAgent is the primary enforcer of these during live operations.

# --- Environment-Specific Risk Settings (for IntradayTradingEnv during training/backtesting) ---
# These control how the training environment reacts to certain risk conditions.
env_turnover_penalty_factor: 0.01 # Factor to penalize reward for exceeding hourly_turnover_cap. Default: 0.01
                                  # This value is passed to IntradayTradingEnv.

# New parameters for controlling termination due to turnover in the environment (Step 7)
env_terminate_on_turnover_breach: false # If true, IntradayTradingEnv will terminate an episode if hourly turnover
                                        # significantly exceeds its cap. Default: false.
env_turnover_termination_threshold_multiplier: 2.0 # Multiplier for 'hourly_turnover_cap'. If actual turnover ratio
                                                   # exceeds (cap * multiplier), and terminate_on_breach is true,
                                                   # the episode ends. Default: 2.0 (i.e., 200% of the cap).
var_limit:
  enabled: true
  threshold: 2_000_000      # currency units
  action: BLOCK

volatility_limit:
  enabled: true
  threshold: 0.35           # 35 % annualised
  action: BLOCK

concentration_limit:
  enabled: true

greeks_limit:
  enabled: true

# --- NEW SENSOR-BASED RISK LIMITS ---
# These integrate with the VectorizedCalculator → RulesEngine → RiskAgentV2 pipeline

# CRITICAL Priority Sensors (Kill Switch Capable)
feed_staleness_limit:
  enabled: true
  threshold: 1000         # milliseconds - kill switch if feeds older than 1 second
  action: KILL_SWITCH
  priority: CRITICAL

drawdown_velocity_limit:
  enabled: true
  threshold: 0.01         # 1% drawdown velocity per time unit
  action: KILL_SWITCH
  priority: CRITICAL

# HIGH Priority Sensors (Block/Throttle)
ulcer_index_limit:
  enabled: true
  threshold: 5.0          # percent - Ulcer Index threshold
  action: BLOCK
  priority: HIGH

expected_shortfall_limit:
  enabled: true
  threshold: 0.03         # 3% Expected Shortfall (CVaR)
  action: BLOCK
  priority: HIGH

kyle_lambda_limit:
  enabled: true
  threshold: 0.0002       # price impact per unit notional
  action: THROTTLE
  priority: HIGH

depth_shock_limit:
  enabled: true
  threshold: 0.05         # 5% maximum liquidation impact
  action: THROTTLE
  priority: HIGH

# MEDIUM Priority Sensors (Alert/Monitor)
latency_drift_limit:
  enabled: true
  threshold: 0.50         # 50% latency drift from baseline
  action: ALERT
  priority: MEDIUM

# LOW Priority Sensors (Monitor Only)
adv_participation_limit:
  enabled: true
  threshold: 0.20         # 20% of average daily volume
  action: MONITOR
  priority: LOW

# --- SENSOR CONFIGURATION ---
sensor_config:
  # Feed staleness monitoring
  feed_staleness:
    enabled: true
    critical_feeds: ["market_data", "order_book", "trades"]
    
  # Drawdown velocity settings
  drawdown_velocity:
    velocity_window: 10
    min_periods: 5
    
  # Ulcer Index settings
  ulcer_index:
    lookback_period: 14
    min_periods: 5
    
  # Expected Shortfall settings
  expected_shortfall:
    confidence_level: 0.95
    lookback_period: 100
    min_periods: 20
    
  # Kyle Lambda settings
  kyle_lambda:
    lookback_period: 50
    min_periods: 10
    impact_decay: 0.9
    
  # Depth shock settings
  depth_shock:
    max_impact_threshold: 0.10
    depth_levels: 5
    impact_model: "linear"
    
  # Latency drift settings
  latency_drift:
    baseline_window: 1000
    current_window: 100
    percentile: 99.9
    
  # ADV participation settings
  adv_participation:
    adv_lookback_days: 20
    participation_threshold: 0.20
    min_volume_days: 5

# --- PRIORITY QUEUE ROUTING ---
# Route events to correct priority queue based on sensor priority
event_routing:
  CRITICAL:
    max_latency_us: 100     # <100µs for kill switch decisions
    queue_size: 1000
    workers: 1              # Single worker for deterministic ordering
    
  HIGH:
    max_latency_us: 1000    # <1ms for block/throttle decisions
    queue_size: 5000
    workers: 2
    
  MEDIUM:
    max_latency_us: 10000   # <10ms for alerts
    queue_size: 10000
    workers: 4
    
  LOW:
    max_latency_us: 100000  # <100ms for monitoring
    queue_size: 50000
    workers: 2

# --- OBSERVABILITY SETTINGS ---
observability:
  prometheus_enabled: true
  metrics:
    calc_latency_histogram: true
    breaches_counter: true
    sensor_health_gauge: true
    
  audit_trail:
    enabled: true
    sink: "JsonAuditSink"
    include_sensor_values: true
    
  performance_monitoring:
    latency_percentiles: [50, 95, 99, 99.9]
    alert_on_slo_breach: true
